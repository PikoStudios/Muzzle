//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class mz_sprite_vertex : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mz_sprite_vertex(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(mz_sprite_vertex obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(mz_sprite_vertex obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~mz_sprite_vertex() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MuzzlePINVOKE.delete_mz_sprite_vertex(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public mz_vec2 position {
    set {
      MuzzlePINVOKE.mz_sprite_vertex_position_set(swigCPtr, mz_vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_sprite_vertex_position_get(swigCPtr);
      mz_vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new mz_vec2(cPtr, false);
      return ret;
    } 
  }

  public mz_vec4 tint {
    set {
      MuzzlePINVOKE.mz_sprite_vertex_tint_set(swigCPtr, mz_vec4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_sprite_vertex_tint_get(swigCPtr);
      mz_vec4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new mz_vec4(cPtr, false);
      return ret;
    } 
  }

  public mz_vec2 tex_coord {
    set {
      MuzzlePINVOKE.mz_sprite_vertex_tex_coord_set(swigCPtr, mz_vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_sprite_vertex_tex_coord_get(swigCPtr);
      mz_vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new mz_vec2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_GLint tex_id {
    set {
      MuzzlePINVOKE.mz_sprite_vertex_tex_id_set(swigCPtr, SWIGTYPE_p_GLint.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint(MuzzlePINVOKE.mz_sprite_vertex_tex_id_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float tiling_factor {
    set {
      MuzzlePINVOKE.mz_sprite_vertex_tiling_factor_set(swigCPtr, value);
    } 
    get {
      float ret = MuzzlePINVOKE.mz_sprite_vertex_tiling_factor_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_GLint render_order {
    set {
      MuzzlePINVOKE.mz_sprite_vertex_render_order_set(swigCPtr, SWIGTYPE_p_GLint.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint(MuzzlePINVOKE.mz_sprite_vertex_render_order_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public mz_sprite_vertex() : this(MuzzlePINVOKE.new_mz_sprite_vertex(), true) {
  }

}
