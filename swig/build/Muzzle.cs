//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Muzzle {
  public static mz_applet mz_initialize_applet(string window_title, int width, int height, mz_applet_flags flags) {
    mz_applet ret = new mz_applet(MuzzlePINVOKE.mz_initialize_applet(window_title, width, height, (int)flags), true);
    return ret;
  }

  public static void mz_start_applet(mz_applet applet, SWIGTYPE_p_f_p_struct_mz_applet__void main_dispatch) {
    MuzzlePINVOKE.mz_start_applet(mz_applet.getCPtr(applet), SWIGTYPE_p_f_p_struct_mz_applet__void.getCPtr(main_dispatch));
  }

  public static SWIGTYPE_p_uint8_t mz_keep_applet(mz_applet applet) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_keep_applet(mz_applet.getCPtr(applet)), true);
    return ret;
  }

  public static void mz_terminate_applet(mz_applet applet) {
    MuzzlePINVOKE.mz_terminate_applet(mz_applet.getCPtr(applet));
  }

  public static void mz_update_window_title(mz_applet applet, string title) {
    MuzzlePINVOKE.mz_update_window_title(mz_applet.getCPtr(applet), title);
  }

  public static void mz_begin_drawing(mz_applet applet) {
    MuzzlePINVOKE.mz_begin_drawing(mz_applet.getCPtr(applet));
  }

  public static void mz_end_drawing(mz_applet applet) {
    MuzzlePINVOKE.mz_end_drawing(mz_applet.getCPtr(applet));
  }

  public static void mz_clear_screen(mz_tint tint) {
    MuzzlePINVOKE.mz_clear_screen(mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_log_status(mz_log_status_type type, string status) {
    MuzzlePINVOKE.mz_log_status((int)type, status);
  }

  public static void mz_log_status_formatted(mz_log_status_type type, string fmt) {
    MuzzlePINVOKE.mz_log_status_formatted((int)type, fmt);
  }

  public static SWIGTYPE_p_void __mz_memory_reallocate(SWIGTYPE_p_void ptr, uint size) {
    global::System.IntPtr cPtr = MuzzlePINVOKE.__mz_memory_reallocate(SWIGTYPE_p_void.getCPtr(ptr), size);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static mz_shader mz_create_shader(string vertex_src, string fragment_src, mz_shader_target target) {
    mz_shader ret = new mz_shader(MuzzlePINVOKE.mz_create_shader(vertex_src, fragment_src, (int)target), true);
    return ret;
  }

  public static int mz_create_shaders(mz_shader out_, uint out_len, SWIGTYPE_p_p_char vertex_srcs, uint vs_len, SWIGTYPE_p_p_char fragment_srcs, uint fs_len, mz_shader_target target) {
    int ret = MuzzlePINVOKE.mz_create_shaders(mz_shader.getCPtr(out_), out_len, SWIGTYPE_p_p_char.getCPtr(vertex_srcs), vs_len, SWIGTYPE_p_p_char.getCPtr(fragment_srcs), fs_len, (int)target);
    return ret;
  }

  public static mz_shader mz_load_shader(string vertex_filepath, string fragment_filepath, mz_shader_target target) {
    mz_shader ret = new mz_shader(MuzzlePINVOKE.mz_load_shader(vertex_filepath, fragment_filepath, (int)target), true);
    return ret;
  }

  public static int mz_load_shaders(mz_shader out_, uint out_len, SWIGTYPE_p_p_char vertex_filepaths, uint vf_len, SWIGTYPE_p_p_char fragment_filepaths, uint ff_len, mz_shader_target target) {
    int ret = MuzzlePINVOKE.mz_load_shaders(mz_shader.getCPtr(out_), out_len, SWIGTYPE_p_p_char.getCPtr(vertex_filepaths), vf_len, SWIGTYPE_p_p_char.getCPtr(fragment_filepaths), ff_len, (int)target);
    return ret;
  }

  public static void mz_use_shader(mz_applet applet, mz_shader shader) {
    MuzzlePINVOKE.mz_use_shader(mz_applet.getCPtr(applet), mz_shader.getCPtr(shader));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_use_shaders(mz_applet applet, mz_shader shaders, uint shaders_len) {
    MuzzlePINVOKE.mz_use_shaders(mz_applet.getCPtr(applet), mz_shader.getCPtr(shaders), shaders_len);
  }

  public static void mz_unload_shader(mz_shader shader) {
    MuzzlePINVOKE.mz_unload_shader(mz_shader.getCPtr(shader));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_unload_shaders(mz_shader shaders, uint len) {
    MuzzlePINVOKE.mz_unload_shaders(mz_shader.getCPtr(shaders), len);
  }

  public static mz_circle_renderer mz_circle_renderer_initialize(SWIGTYPE_p_uint32_t max_circles) {
    mz_circle_renderer ret = new mz_circle_renderer(MuzzlePINVOKE.mz_circle_renderer_initialize(SWIGTYPE_p_uint32_t.getCPtr(max_circles)), true);
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void mz_circle_renderer_flush(mz_circle_renderer circle_renderer, float width, float height, int render_order) {
    MuzzlePINVOKE.mz_circle_renderer_flush(mz_circle_renderer.getCPtr(circle_renderer), width, height, render_order);
  }

  public static SWIGTYPE_p_uint8_t mz_circle_renderer_push_circle(mz_circle_renderer circle_renderer, mz_circle_vertex v1, mz_circle_vertex v2, mz_circle_vertex v3, mz_circle_vertex v4) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_circle_renderer_push_circle(mz_circle_renderer.getCPtr(circle_renderer), mz_circle_vertex.getCPtr(v1), mz_circle_vertex.getCPtr(v2), mz_circle_vertex.getCPtr(v3), mz_circle_vertex.getCPtr(v4)), true);
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void mz_circle_renderer_destroy(mz_circle_renderer circle_renderer) {
    MuzzlePINVOKE.mz_circle_renderer_destroy(mz_circle_renderer.getCPtr(circle_renderer));
  }

  public static mz_quad_renderer mz_quad_renderer_initialize(SWIGTYPE_p_uint32_t max_quads) {
    mz_quad_renderer ret = new mz_quad_renderer(MuzzlePINVOKE.mz_quad_renderer_initialize(SWIGTYPE_p_uint32_t.getCPtr(max_quads)), true);
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void mz_quad_renderer_flush(mz_quad_renderer quad_renderer, float width, float height, int render_order) {
    MuzzlePINVOKE.mz_quad_renderer_flush(mz_quad_renderer.getCPtr(quad_renderer), width, height, render_order);
  }

  public static SWIGTYPE_p_uint8_t mz_quad_renderer_push_quad(mz_quad_renderer quad_renderer, mz_quad_vertex v1, mz_quad_vertex v2, mz_quad_vertex v3, mz_quad_vertex v4) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_quad_renderer_push_quad(mz_quad_renderer.getCPtr(quad_renderer), mz_quad_vertex.getCPtr(v1), mz_quad_vertex.getCPtr(v2), mz_quad_vertex.getCPtr(v3), mz_quad_vertex.getCPtr(v4)), true);
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void mz_quad_renderer_destroy(mz_quad_renderer quad_renderer) {
    MuzzlePINVOKE.mz_quad_renderer_destroy(mz_quad_renderer.getCPtr(quad_renderer));
  }

  public static mz_sprite_renderer mz_sprite_renderer_initialize(SWIGTYPE_p_uint32_t max_sprites) {
    mz_sprite_renderer ret = new mz_sprite_renderer(MuzzlePINVOKE.mz_sprite_renderer_initialize(SWIGTYPE_p_uint32_t.getCPtr(max_sprites)), true);
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void mz_sprite_renderer_flush(mz_sprite_renderer sprite_renderer, float width, float height, int render_order) {
    MuzzlePINVOKE.mz_sprite_renderer_flush(mz_sprite_renderer.getCPtr(sprite_renderer), width, height, render_order);
  }

  public static int mz_sprite_renderer_push_texture(mz_sprite_renderer sprite_renderer, SWIGTYPE_p_GLint texture_id) {
    int ret = MuzzlePINVOKE.mz_sprite_renderer_push_texture(mz_sprite_renderer.getCPtr(sprite_renderer), SWIGTYPE_p_GLint.getCPtr(texture_id));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_uint8_t mz_sprite_renderer_push_sprite(mz_sprite_renderer sprite_renderer, mz_sprite_vertex v1, mz_sprite_vertex v2, mz_sprite_vertex v3, mz_sprite_vertex v4) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_sprite_renderer_push_sprite(mz_sprite_renderer.getCPtr(sprite_renderer), mz_sprite_vertex.getCPtr(v1), mz_sprite_vertex.getCPtr(v2), mz_sprite_vertex.getCPtr(v3), mz_sprite_vertex.getCPtr(v4)), true);
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void mz_sprite_renderer_destroy(mz_sprite_renderer sprite_renderer) {
    MuzzlePINVOKE.mz_sprite_renderer_destroy(mz_sprite_renderer.getCPtr(sprite_renderer));
  }

  public static SWIGTYPE_p_uint8_t mz_key_pressed(mz_applet applet, mz_key key) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_key_pressed(mz_applet.getCPtr(applet), (int)key), true);
    return ret;
  }

  public static SWIGTYPE_p_uint8_t mz_key_released(mz_applet applet, mz_key key) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_key_released(mz_applet.getCPtr(applet), (int)key), true);
    return ret;
  }

  public static SWIGTYPE_p_uint8_t mz_mouse_pressed(mz_applet applet, mz_mouse_button button) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_mouse_pressed(mz_applet.getCPtr(applet), (int)button), true);
    return ret;
  }

  public static SWIGTYPE_p_uint8_t mz_mouse_released(mz_applet applet, mz_mouse_button button) {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_mouse_released(mz_applet.getCPtr(applet), (int)button), true);
    return ret;
  }

  public static mz_vec2_d mz_get_mouse_position(mz_applet applet) {
    mz_vec2_d ret = new mz_vec2_d(MuzzlePINVOKE.mz_get_mouse_position(mz_applet.getCPtr(applet)), true);
    return ret;
  }

  public static mz_vec2 mz_get_mouse_position_vec2(mz_applet applet) {
    mz_vec2 ret = new mz_vec2(MuzzlePINVOKE.mz_get_mouse_position_vec2(mz_applet.getCPtr(applet)), true);
    return ret;
  }

  public static double mz_get_mouse_x(mz_applet applet) {
    double ret = MuzzlePINVOKE.mz_get_mouse_x(mz_applet.getCPtr(applet));
    return ret;
  }

  public static double mz_get_mouse_y(mz_applet applet) {
    double ret = MuzzlePINVOKE.mz_get_mouse_y(mz_applet.getCPtr(applet));
    return ret;
  }

  public static float mz_get_mouse_xf(mz_applet applet) {
    float ret = MuzzlePINVOKE.mz_get_mouse_xf(mz_applet.getCPtr(applet));
    return ret;
  }

  public static float mz_get_mouse_yf(mz_applet applet) {
    float ret = MuzzlePINVOKE.mz_get_mouse_yf(mz_applet.getCPtr(applet));
    return ret;
  }

  public static void mz_draw_circle(mz_applet applet, float x, float y, float radius, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_circle(mz_applet.getCPtr(applet), x, y, radius, mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_draw_circle_vec2(mz_applet applet, mz_vec2 center, float radius, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_circle_vec2(mz_applet.getCPtr(applet), mz_vec2.getCPtr(center), radius, mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_draw_circle_vec3(mz_applet applet, mz_vec3 center_and_radius, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_circle_vec3(mz_applet.getCPtr(applet), mz_vec3.getCPtr(center_and_radius), mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_draw_circle_type(mz_applet applet, mz_circle circle, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_circle_type(mz_applet.getCPtr(applet), mz_circle.getCPtr(circle), mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_draw_rectangle(mz_applet applet, float x, float y, float width, float height, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_rectangle(mz_applet.getCPtr(applet), x, y, width, height, mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_draw_rectangle_vec2(mz_applet applet, mz_vec2 position, mz_vec2 size, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_rectangle_vec2(mz_applet.getCPtr(applet), mz_vec2.getCPtr(position), mz_vec2.getCPtr(size), mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_draw_rectangle_type(mz_applet applet, mz_rectangle rec, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_rectangle_type(mz_applet.getCPtr(applet), mz_rectangle.getCPtr(rec), mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static mz_sprite mz_load_sprite(string filepath) {
    mz_sprite ret = new mz_sprite(MuzzlePINVOKE.mz_load_sprite(filepath), true);
    return ret;
  }

  public static void mz_unload_sprite(mz_sprite data) {
    MuzzlePINVOKE.mz_unload_sprite(mz_sprite.getCPtr(data));
  }

  public static void mz_draw_sprite(mz_applet applet, mz_sprite data, float x, float y, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_sprite(mz_applet.getCPtr(applet), mz_sprite.getCPtr(data), x, y, mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mz_draw_sprite_vec2(mz_applet applet, mz_sprite data, mz_vec2 pos, mz_tint tint) {
    MuzzlePINVOKE.mz_draw_sprite_vec2(mz_applet.getCPtr(applet), mz_sprite.getCPtr(data), mz_vec2.getCPtr(pos), mz_tint.getCPtr(tint));
    if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int MUZZLE_FALSE = MuzzlePINVOKE.MUZZLE_FALSE_get();
  public static readonly int MUZZLE_TRUE = MuzzlePINVOKE.MUZZLE_TRUE_get();
  public static readonly string MUZZLE_GLAD_INCLUDE_PATH = MuzzlePINVOKE.MUZZLE_GLAD_INCLUDE_PATH_get();
  public static readonly string MUZZLE_GLFW_INCLUDE_PATH = MuzzlePINVOKE.MUZZLE_GLFW_INCLUDE_PATH_get();
  public static readonly int MUZZLE_OPENGL_VERSION_MAJOR = MuzzlePINVOKE.MUZZLE_OPENGL_VERSION_MAJOR_get();
  public static readonly int MUZZLE_OPENGL_VERSION_MINOR = MuzzlePINVOKE.MUZZLE_OPENGL_VERSION_MINOR_get();
}
