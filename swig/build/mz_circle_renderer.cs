//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class mz_circle_renderer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mz_circle_renderer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(mz_circle_renderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(mz_circle_renderer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~mz_circle_renderer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MuzzlePINVOKE.delete_mz_circle_renderer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_uint32_t buffers {
    set {
      MuzzlePINVOKE.mz_circle_renderer_buffers_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_circle_renderer_buffers_get(swigCPtr);
      SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
      return ret;
    } 
  }

  public mz_circle_vertex vertices {
    set {
      MuzzlePINVOKE.mz_circle_renderer_vertices_set(swigCPtr, mz_circle_vertex.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_circle_renderer_vertices_get(swigCPtr);
      mz_circle_vertex ret = (cPtr == global::System.IntPtr.Zero) ? null : new mz_circle_vertex(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t vertex_index {
    set {
      MuzzlePINVOKE.mz_circle_renderer_vertex_index_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(MuzzlePINVOKE.mz_circle_renderer_vertex_index_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t circle_count {
    set {
      MuzzlePINVOKE.mz_circle_renderer_circle_count_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(MuzzlePINVOKE.mz_circle_renderer_circle_count_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t max_circles {
    set {
      MuzzlePINVOKE.mz_circle_renderer_max_circles_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(MuzzlePINVOKE.mz_circle_renderer_max_circles_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_GLuint shader_id {
    set {
      MuzzlePINVOKE.mz_circle_renderer_shader_id_set(swigCPtr, SWIGTYPE_p_GLuint.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_GLuint ret = new SWIGTYPE_p_GLuint(MuzzlePINVOKE.mz_circle_renderer_shader_id_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t locs_valid {
    set {
      MuzzlePINVOKE.mz_circle_renderer_locs_valid_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_circle_renderer_locs_valid_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_GLint loc_uViewportResolution {
    set {
      MuzzlePINVOKE.mz_circle_renderer_loc_uViewportResolution_set(swigCPtr, SWIGTYPE_p_GLint.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint(MuzzlePINVOKE.mz_circle_renderer_loc_uViewportResolution_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_GLint loc_uRenderOrderMax {
    set {
      MuzzlePINVOKE.mz_circle_renderer_loc_uRenderOrderMax_set(swigCPtr, SWIGTYPE_p_GLint.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint(MuzzlePINVOKE.mz_circle_renderer_loc_uRenderOrderMax_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public mz_circle_renderer() : this(MuzzlePINVOKE.new_mz_circle_renderer(), true) {
  }

}
