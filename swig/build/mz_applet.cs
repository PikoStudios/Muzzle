//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class mz_applet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mz_applet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(mz_applet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(mz_applet obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~mz_applet() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MuzzlePINVOKE.delete_mz_applet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_GLFWwindow window {
    set {
      MuzzlePINVOKE.mz_applet_window_set(swigCPtr, SWIGTYPE_p_GLFWwindow.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_applet_window_get(swigCPtr);
      SWIGTYPE_p_GLFWwindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWwindow(cPtr, false);
      return ret;
    } 
  }

  public int width {
    set {
      MuzzlePINVOKE.mz_applet_width_set(swigCPtr, value);
    } 
    get {
      int ret = MuzzlePINVOKE.mz_applet_width_get(swigCPtr);
      return ret;
    } 
  }

  public int height {
    set {
      MuzzlePINVOKE.mz_applet_height_set(swigCPtr, value);
    } 
    get {
      int ret = MuzzlePINVOKE.mz_applet_height_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_GLint render_order {
    set {
      MuzzlePINVOKE.mz_applet_render_order_set(swigCPtr, SWIGTYPE_p_GLint.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint(MuzzlePINVOKE.mz_applet_render_order_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public mz_quad_renderer quad_renderer {
    set {
      MuzzlePINVOKE.mz_applet_quad_renderer_set(swigCPtr, mz_quad_renderer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_applet_quad_renderer_get(swigCPtr);
      mz_quad_renderer ret = (cPtr == global::System.IntPtr.Zero) ? null : new mz_quad_renderer(cPtr, false);
      return ret;
    } 
  }

  public mz_sprite_renderer sprite_renderer {
    set {
      MuzzlePINVOKE.mz_applet_sprite_renderer_set(swigCPtr, mz_sprite_renderer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_applet_sprite_renderer_get(swigCPtr);
      mz_sprite_renderer ret = (cPtr == global::System.IntPtr.Zero) ? null : new mz_sprite_renderer(cPtr, false);
      return ret;
    } 
  }

  public mz_circle_renderer circle_renderer {
    set {
      MuzzlePINVOKE.mz_applet_circle_renderer_set(swigCPtr, mz_circle_renderer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MuzzlePINVOKE.mz_applet_circle_renderer_get(swigCPtr);
      mz_circle_renderer ret = (cPtr == global::System.IntPtr.Zero) ? null : new mz_circle_renderer(cPtr, false);
      return ret;
    } 
  }

  public double delta_time {
    set {
      MuzzlePINVOKE.mz_applet_delta_time_set(swigCPtr, value);
    } 
    get {
      double ret = MuzzlePINVOKE.mz_applet_delta_time_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t delta_time_flag {
    set {
      MuzzlePINVOKE.mz_applet_delta_time_flag_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(MuzzlePINVOKE.mz_applet_delta_time_flag_get(swigCPtr), true);
      if (MuzzlePINVOKE.SWIGPendingException.Pending) throw MuzzlePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public mz_applet() : this(MuzzlePINVOKE.new_mz_applet(), true) {
  }

}
